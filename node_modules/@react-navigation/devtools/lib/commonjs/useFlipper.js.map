{"version":3,"sources":["useFlipper.tsx"],"names":["FlipperModule","require","e","useFlipper","ref","Error","addPlugin","connectionRef","React","useRef","resetRoot","result","connection","current","type","send","id","state","action","stack","useEffect","getId","onConnect","on","event","listener","receive","params","responder","success","error","method","args","linking","global","REACT_NAVIGATION_DEVTOOLS","get","trim","eval","config","onDisconnect","undefined","runInBackground"],"mappings":"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","sourcesContent":["import type { NavigationContainerRef } from '@react-navigation/core';\nimport { nanoid } from 'nanoid/non-secure';\nimport * as React from 'react';\nimport type { Flipper } from 'react-native-flipper';\n\nimport useDevToolsBase from './useDevToolsBase';\n\nlet FlipperModule: typeof import('react-native-flipper') | undefined;\n\ntry {\n  FlipperModule = require('react-native-flipper');\n} catch (e) {\n  // Do nothing\n}\n\nexport default function useFlipper(\n  ref: React.RefObject<NavigationContainerRef<any>>\n) {\n  if (FlipperModule == null) {\n    throw new Error(\n      \"Please install the 'react-native-flipper' package in your project to use Flipper integration for React Navigation.\"\n    );\n  }\n\n  const { addPlugin } = FlipperModule;\n\n  const connectionRef = React.useRef<Flipper.FlipperConnection>();\n\n  const { resetRoot } = useDevToolsBase(ref, (result) => {\n    const connection = connectionRef.current;\n\n    if (!connection) {\n      return;\n    }\n\n    switch (result.type) {\n      case 'init':\n        connection.send('init', {\n          id: nanoid(),\n          state: result.state,\n        });\n        break;\n      case 'action':\n        connection.send('action', {\n          id: nanoid(),\n          action: result.action,\n          state: result.state,\n          stack: result.stack,\n        });\n        break;\n    }\n  });\n\n  React.useEffect(() => {\n    addPlugin({\n      getId() {\n        return 'react-navigation';\n      },\n      async onConnect(connection) {\n        connectionRef.current = connection;\n\n        const on = (event: string, listener: (params: any) => Promise<any>) => {\n          connection.receive(event, (params, responder) => {\n            try {\n              const result = listener(params);\n\n              // Return null instead of undefined, otherwise flipper doesn't respond\n              responder.success(result ?? null);\n            } catch (e) {\n              responder.error(e);\n            }\n          });\n        };\n\n        on('navigation.invoke', ({ method, args = [] }) => {\n          switch (method) {\n            case 'resetRoot':\n              return resetRoot(args[0]);\n            default:\n              // @ts-expect-error: we want to call arbitrary methods here\n              return ref.current?.[method](...args);\n          }\n        });\n\n        on('linking.invoke', ({ method, args = [] }) => {\n          const linking: any = ref.current\n            ? // @ts-ignore: this might not exist\n              global.REACT_NAVIGATION_DEVTOOLS?.get(ref.current)?.linking\n            : null;\n\n          switch (method) {\n            case 'getStateFromPath':\n            case 'getPathFromState':\n            case 'getActionFromState':\n              return linking?.[method](\n                args[0],\n                args[1]?.trim()\n                  ? // eslint-disable-next-line no-eval\n                    eval(`(function() { return ${args[1]}; }())`)\n                  : linking.config\n              );\n            default:\n              return linking?.[method](...args);\n          }\n        });\n      },\n      onDisconnect() {\n        connectionRef.current = undefined;\n      },\n      runInBackground() {\n        return false;\n      },\n    });\n  }, [addPlugin, ref, resetRoot]);\n}\n"]}