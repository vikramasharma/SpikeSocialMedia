{"version":3,"sources":["parseErrorStack.tsx"],"names":["convertHermesStack","stack","frames","entry","entries","type","location","functionName","push","methodName","file","sourceUrl","lineNumber","line1Based","column","column1Based","virtualOffset0Based","parseErrorStack","errorStack","parsedStack","Array","isArray","global","HermesInternal","stacktraceParser","parse","map","frame"],"mappings":";;;;;;;AAOA;;AAEA;;;;;;;;AATA;AACA;AACA;AACA;AACA;AACA;AAaA,SAASA,kBAAT,CAA4BC,KAA5B,EAAoE;AAClE,QAAMC,MAAM,GAAG,EAAf;;AACA,OAAK,MAAMC,KAAX,IAAoBF,KAAK,CAACG,OAA1B,EAAmC;AACjC,QAAID,KAAK,CAACE,IAAN,KAAe,OAAnB,EAA4B;AAC1B;AACD;;AACD,UAAM;AAAEC,MAAAA,QAAF;AAAYC,MAAAA;AAAZ,QAA6BJ,KAAnC;;AACA,QAAIG,QAAQ,CAACD,IAAT,KAAkB,QAAtB,EAAgC;AAC9B;AACD;;AACDH,IAAAA,MAAM,CAACM,IAAP,CAAY;AACVC,MAAAA,UAAU,EAAEF,YADF;AAEVG,MAAAA,IAAI,EAAEJ,QAAQ,CAACK,SAFL;AAGVC,MAAAA,UAAU,EAAEN,QAAQ,CAACO,UAHX;AAIVC,MAAAA,MAAM,EACJR,QAAQ,CAACD,IAAT,KAAkB,QAAlB,GACIC,QAAQ,CAACS,YAAT,GAAwB,CAD5B,GAEIT,QAAQ,CAACU;AAPL,KAAZ;AASD;;AACD,SAAOd,MAAP;AACD;;AAED,SAASe,eAAT,CAAyBC,UAAzB,EAA2E;AACzE,MAAI,CAACA,UAAL,EAAiB;AACf,WAAO,EAAP;AACD;;AAED,QAAMC,WAAW,GAAGC,KAAK,CAACC,OAAN,CAAcH,UAAd,IAChBA,UADgB,GAEfI,MAAD,CAAgBC,cAAhB,GACAvB,kBAAkB,CAAC,+BAAiBkB,UAAjB,CAAD,CADlB,GAEAM,gBAAgB,CAACC,KAAjB,CAAuBP,UAAvB,EAAmCQ,GAAnC,CAAwCC,KAAD,KAAY,EACjD,GAAGA,KAD8C;AAEjDb,IAAAA,MAAM,EAAEa,KAAK,CAACb,MAAN,IAAgB,IAAhB,GAAuBa,KAAK,CAACb,MAAN,GAAe,CAAtC,GAA0C;AAFD,GAAZ,CAAvC,CAJJ;AASA,SAAOK,WAAP;AACD;;eAEcF,e","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport * as stacktraceParser from 'stacktrace-parser';\n\nimport parseHermesStack, { HermesParsedStack } from './parseHermesStack';\n\ninterface StackFrame {\n  methodName: string;\n  file: string;\n  lineNumber: number;\n  column: number;\n}\n\nfunction convertHermesStack(stack: HermesParsedStack): StackFrame[] {\n  const frames = [];\n  for (const entry of stack.entries) {\n    if (entry.type !== 'FRAME') {\n      continue;\n    }\n    const { location, functionName } = entry;\n    if (location.type === 'NATIVE') {\n      continue;\n    }\n    frames.push({\n      methodName: functionName,\n      file: location.sourceUrl,\n      lineNumber: location.line1Based,\n      column:\n        location.type === 'SOURCE'\n          ? location.column1Based - 1\n          : location.virtualOffset0Based,\n    });\n  }\n  return frames;\n}\n\nfunction parseErrorStack(errorStack?: string | StackFrame[]): StackFrame[] {\n  if (!errorStack) {\n    return [];\n  }\n\n  const parsedStack = Array.isArray(errorStack)\n    ? errorStack\n    : (global as any).HermesInternal\n    ? convertHermesStack(parseHermesStack(errorStack))\n    : stacktraceParser.parse(errorStack).map((frame) => ({\n        ...frame,\n        column: frame.column != null ? frame.column - 1 : null,\n      }));\n\n  return parsedStack as StackFrame[];\n}\n\nexport default parseErrorStack;\n"]}